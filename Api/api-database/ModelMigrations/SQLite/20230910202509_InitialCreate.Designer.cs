// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

#nullable disable

namespace ModelMigrations.SQLite
{
    [DbContext(typeof(SQLiteModelContext))]
    [Migration("20230910202509_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("Model.Entities.Journey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Journeys");
                });

            modelBuilder.Entity("Model.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Model.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("NSRId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicCode")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StopPlaceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StopPlaceId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Model.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationDisplay")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direction")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LineId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Model.Entities.StopPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StopPlaces");
                });

            modelBuilder.Entity("Model.Entities.StopTime", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("RouteId");

                    b.ToTable("StopTimes");
                });

            modelBuilder.Entity("Model.Entities.Platform", b =>
                {
                    b.HasOne("Model.Entities.StopPlace", "StopPlace")
                        .WithMany("Platforms")
                        .HasForeignKey("StopPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StopPlace");
                });

            modelBuilder.Entity("Model.Entities.Route", b =>
                {
                    b.HasOne("Model.Entities.Line", "Line")
                        .WithMany("Routes")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Model.Entities.StopTime", b =>
                {
                    b.HasOne("Model.Entities.Journey", "Journey")
                        .WithMany("Stops")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Platform", "Platform")
                        .WithMany("Stops")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Route", "Route")
                        .WithMany("Stops")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");

                    b.Navigation("Platform");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Model.Entities.Journey", b =>
                {
                    b.Navigation("Stops");
                });

            modelBuilder.Entity("Model.Entities.Line", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Model.Entities.Platform", b =>
                {
                    b.Navigation("Stops");
                });

            modelBuilder.Entity("Model.Entities.Route", b =>
                {
                    b.Navigation("Stops");
                });

            modelBuilder.Entity("Model.Entities.StopPlace", b =>
                {
                    b.Navigation("Platforms");
                });
#pragma warning restore 612, 618
        }
    }
}
